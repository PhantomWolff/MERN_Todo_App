"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var KeyCode = _interopRequireWildcard(require("keycode-js"));

var _TableRows = _interopRequireDefault(require("./TableRows"));

var _TableRow = _interopRequireDefault(require("./TableRow"));

var _TableHeader = _interopRequireDefault(require("./TableHeader"));

var _TableSubheader = _interopRequireDefault(require("./TableSubheader"));

var _SelectableUtils = _interopRequireDefault(require("./SelectableUtils"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var propTypes = {
  /**
   * The children rows to be be passed to the component.
   */
  children: _propTypes.default.node,

  /**
   * Indicates if the unselected rows are disabled. This is helpful for enabling max row selection.
   */
  disableUnselectedRows: _propTypes.default.bool,

  /**
   * A callback function to execute when the selection state changes. The first parameter is the event. The second parameter is the selectedIndexes.
   */
  onChange: _propTypes.default.func,

  /**
   * The list of selected row indexes.
   */
  // eslint-disable-next-line react/forbid-prop-types
  selectedIndexes: _propTypes.default.array
};
var defaultProps = {
  disableUnselectedRows: false,
  onChange: undefined,
  selectedIndexes: []
};

var SelectableTableRows =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SelectableTableRows, _React$Component);

  function SelectableTableRows(props) {
    var _this;

    _classCallCheck(this, SelectableTableRows);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectableTableRows).call(this, props));
    _this.handleOnChange = _this.handleOnChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SelectableTableRows, [{
    key: "handleOnChange",
    value: function handleOnChange(event, index) {
      if (this.props.onChange) {
        this.props.onChange(event, index);
      }
    }
  }, {
    key: "wrappedOnClickForRow",
    value: function wrappedOnClickForRow(row, index) {
      var _this2 = this;

      var initialOnClick = row.props.onClick;
      return function (event) {
        // The default isSelectable attribute is either undefined or true, unless the consumer specifies the row's isSelectable attribute as false.
        if (row.props.isSelectable !== false) {
          _this2.handleOnChange(event, index);
        }

        if (initialOnClick) {
          initialOnClick(event);
        }
      };
    }
  }, {
    key: "wrappedOnKeyDownForRow",
    value: function wrappedOnKeyDownForRow(row, index) {
      var _this3 = this;

      var initialOnKeyDown = row.props.onKeyDown;
      return function (event) {
        if (event.nativeEvent.keyCode === KeyCode.KEY_RETURN || event.nativeEvent.keyCode === KeyCode.KEY_SPACE) {
          // The default isSelectable attribute is either undefined or true, unless the consumer specifies the row's isSelectable attribute as false.
          if (row.props.isSelectable !== false) {
            _this3.handleOnChange(event, index);
          }
        }

        if (initialOnKeyDown) {
          initialOnKeyDown(event);
        }
      };
    }
  }, {
    key: "newPropsForRow",
    value: function newPropsForRow(row, index, onClick, onKeyDown) {
      var isSelected = this.props.selectedIndexes.indexOf(index) >= 0;
      var newProps = {}; // Set the isSelected attribute to false for all the rows except the rows whose index is set to state selectedIndex.

      if (isSelected !== row.props.isSelected) {
        newProps.isSelected = isSelected;
      } // Set the default isSelectable attribute to true, unless the consumer specifies the row isSelectable as false.


      newProps.isSelectable = true;

      if (row.props.isSelectable === false) {
        newProps.isSelectable = row.props.isSelectable;
      }

      if (this.props.disableUnselectedRows && !isSelected) {
        newProps.isSelectable = false;
      } // If selectable, add tabIndex on rows to navigate through keyboard tab key for selectable row and add
      // onClick and onKeyDown functions.


      if (newProps.isSelectable) {
        newProps.tabIndex = '0';
        newProps.onClick = onClick;
        newProps.onKeyDown = onKeyDown;
      }

      return newProps;
    }
  }, {
    key: "clonedChildItems",
    value: function clonedChildItems(rows) {
      var _this4 = this;

      return _react.default.Children.map(rows, function (row, index) {
        if (row.type !== _TableHeader.default && row.type !== _TableSubheader.default) {
          var wrappedOnClick = _this4.wrappedOnClickForRow(row, index);

          var wrappedOnKeyDown = _this4.wrappedOnKeyDownForRow(row, index);

          var newProps = _this4.newPropsForRow(row, index, wrappedOnClick, wrappedOnKeyDown);

          return _react.default.cloneElement(row, newProps);
        }

        return row;
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          disableUnselectedRows = _this$props.disableUnselectedRows,
          onChange = _this$props.onChange,
          selectedIndexes = _this$props.selectedIndexes,
          customProps = _objectWithoutProperties(_this$props, ["children", "disableUnselectedRows", "onChange", "selectedIndexes"]);

      var clonedChildItems = this.clonedChildItems(children);
      return _react.default.createElement(_TableRows.default, customProps, clonedChildItems);
    }
  }]);

  return SelectableTableRows;
}(_react.default.Component);

SelectableTableRows.propTypes = propTypes;
SelectableTableRows.defaultProps = defaultProps;
SelectableTableRows.Row = _TableRow.default;
SelectableTableRows.Utils = _SelectableUtils.default;
var _default = SelectableTableRows;
exports.default = _default;