"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TableRow = _interopRequireDefault(require("./TableRow"));

var _TableSubheader = _interopRequireDefault(require("./TableSubheader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  /**
   * The children passed to the component
   */
  children: _propTypes.default.node,

  /**
   * A callback function for onClick action
   */
  onClick: _propTypes.default.func,

  /**
   * A callback function for onKeyDown action
   */
  onKeyDown: _propTypes.default.func
};
var defaultProps = {
  onClick: undefined,
  onKeyDown: undefined
};

function cloneChildItems(children, onClick, onKeyDown, numberOfCols) {
  return _react.default.Children.map(children, function (child) {
    var newProps = {};

    if (onClick) {
      newProps.onClick = onClick;
    }

    if (onKeyDown) {
      newProps.onKeyDown = onKeyDown;
    }

    if (child.type === _TableRow.default) {
      return _react.default.cloneElement(child, newProps);
    }

    if (child.type === _TableSubheader.default) {
      return _react.default.cloneElement(child, {
        colSpan: numberOfCols
      });
    }

    return child;
  });
}

function getNumberOfColumns(children) {
  var count = 0;

  var childArray = _react.default.Children.toArray(children);

  for (var i = 0; i < childArray.length; i += 1) {
    // If the child is a TableRow and it has children, then return the count of the TableRow's children.
    // Assumptions: Number of children will be equal to number of columns. Children of TableRow should be TableCell
    if (childArray[i].type === _TableRow.default && childArray[i].props.children !== null) {
      count = _react.default.Children.count(childArray[i].props.children);
      return count >= 16 ? 16 : count;
    }
  }

  return count;
}

var TableRows = function TableRows(_ref) {
  var children = _ref.children,
      onClick = _ref.onClick,
      onKeyDown = _ref.onKeyDown,
      customProps = _objectWithoutProperties(_ref, ["children", "onClick", "onKeyDown"]);

  var numberOfCols = getNumberOfColumns(children);
  var cloneChildren = cloneChildItems(children, onClick, onKeyDown, numberOfCols);
  return _react.default.createElement("tbody", customProps, cloneChildren);
};

TableRows.propTypes = propTypes;
TableRows.defaultProps = defaultProps;
var _default = TableRows;
exports.default = _default;