"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableHeaderCellSort = exports.TableHeaderCellMinWidth = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _IconCaretDown = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretDown"));

var _IconCaretUp = _interopRequireDefault(require("terra-icon/lib/icon/IconCaretUp"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _TableModule = _interopRequireDefault(require("./Table.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_TableModule.default);

var TableHeaderCellMinWidth = {
  TINY: 'tiny',
  SMALL: 'small',
  MEDIUM: 'medium',
  LARGE: 'large',
  HUGE: 'huge'
};
exports.TableHeaderCellMinWidth = TableHeaderCellMinWidth;
var TableHeaderCellSort = {
  ASC: 'asc',
  DESC: 'desc'
};
exports.TableHeaderCellSort = TableHeaderCellSort;
var propTypes = {
  /**
   * Content to be displayed for the column header
   */
  content: _propTypes.default.node.isRequired,

  /**
   * The minimum width for the column
   */
  minWidth: _propTypes.default.oneOf(['tiny', 'small', 'medium', 'large', 'huge']),

  /**
   * Whether or not data in table is sorted (asc, desc)
   */
  sort: _propTypes.default.oneOf(['asc', 'desc'])
};
var defaultProps = {
  minWidth: 'small'
};

var iconDown = _react.default.createElement(_IconCaretDown.default, null);

var iconUp = _react.default.createElement(_IconCaretUp.default, null);

var TableHeaderCell = function TableHeaderCell(_ref) {
  var content = _ref.content,
      minWidth = _ref.minWidth,
      sort = _ref.sort,
      customProps = _objectWithoutProperties(_ref, ["content", "minWidth", "sort"]);

  var contentClassName = cx([_defineProperty({}, "min-width-".concat(minWidth), minWidth), customProps.className]);
  var dataSort = {
    'data-sort': sort
  };
  var sortIndicator = null;

  if (sort === 'asc') {
    sortIndicator = _react.default.createElement("span", {
      className: cx('sort-indicator')
    }, iconUp);
  } else if (sort === 'desc') {
    sortIndicator = _react.default.createElement("span", {
      className: cx('sort-indicator')
    }, iconDown);
  }

  return _react.default.createElement("th", _extends({}, customProps, {
    "data-terra-table-header-cell": true,
    className: contentClassName
  }, dataSort), content, sortIndicator);
};

TableHeaderCell.propTypes = propTypes;
TableHeaderCell.defaultProps = defaultProps;
var _default = TableHeaderCell;
exports.default = _default;