"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SelectableTableRows = _interopRequireDefault(require("./SelectableTableRows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var propTypes = {
  /**
   * The children passed to the component
   */
  children: _propTypes.default.node,

  /**
   * A callback function triggered when a row is selected or unselected. Passes the following parameters:
   *
   * - the event triggering the onChange
   * - the list of the indexes for the rows selected
   * - the index of the last item selected
   */
  onChange: _propTypes.default.func,

  /**
   * The maximum number of rows that can be selected.
   */
  maxSelectionCount: _propTypes.default.number
};
var defaultProps = {
  onChange: undefined,
  maxSelectionCount: undefined
};

var MultiSelectableRows =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MultiSelectableRows, _React$Component);

  function MultiSelectableRows(props) {
    var _this;

    _classCallCheck(this, MultiSelectableRows);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiSelectableRows).call(this, props));
    _this.state = {
      selectedIndexes: _SelectableTableRows.default.Utils.initialMultiSelectRowIndexes(_this.props.children, _this.props.maxSelectionCount)
    };
    _this.handleOnChange = _this.handleOnChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(MultiSelectableRows, [{
    key: "handleOnChange",
    value: function handleOnChange(event, index) {
      var _this$props = this.props,
          children = _this$props.children,
          maxSelectionCount = _this$props.maxSelectionCount;
      var _SelectableTableRows$ = _SelectableTableRows.default.Utils,
          shouldHandleMultiSelectRowSelection = _SelectableTableRows$.shouldHandleMultiSelectRowSelection,
          updatedMultiSelectedIndexes = _SelectableTableRows$.updatedMultiSelectedIndexes; // Check if the selectedIndexes state should update before updating

      if (shouldHandleMultiSelectRowSelection(children, maxSelectionCount, this.state.selectedIndexes, index)) {
        event.preventDefault();
        /* eslint-disable react/no-access-state-in-setstate */

        var newIndexes = updatedMultiSelectedIndexes(this.state.selectedIndexes, index);
        this.setState({
          selectedIndexes: newIndexes
        });

        if (this.props.onChange) {
          this.props.onChange(event, newIndexes, index);
        }
        /* eslint-enable react/no-access-state-in-setstate */

      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          maxSelectionCount = _this$props2.maxSelectionCount,
          onChange = _this$props2.onChange,
          customProps = _objectWithoutProperties(_this$props2, ["children", "maxSelectionCount", "onChange"]);

      return _react.default.createElement(_SelectableTableRows.default, _extends({}, customProps, {
        onChange: this.handleOnChange,
        selectedIndexes: this.state.selectedIndexes,
        disableUnselectedRows: this.state.selectedIndexes.length >= _SelectableTableRows.default.Utils.validatedMaxCountSelection(children, maxSelectionCount)
      }), children);
    }
  }]);

  return MultiSelectableRows;
}(_react.default.Component);

MultiSelectableRows.propTypes = propTypes;
MultiSelectableRows.defaultProps = defaultProps;
MultiSelectableRows.Row = _SelectableTableRows.default.Row;
var _default = MultiSelectableRows;
exports.default = _default;