"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bind = _interopRequireDefault(require("classnames/bind"));

var _TableModule = _interopRequireDefault(require("./Table.module.scss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var cx = _bind.default.bind(_TableModule.default);

var propTypes = {
  /**
   * The children passed to the component
   */
  children: _propTypes.default.node,

  /**
   * Whether or not row is selected
   */
  isSelected: _propTypes.default.bool,

  /**
   * Whether or not row is selectable
   */
  isSelectable: _propTypes.default.bool
};
var defaultProps = {
  isSelected: false,
  isSelectable: undefined
};

var TableRow = function TableRow(_ref) {
  var children = _ref.children,
      isSelected = _ref.isSelected,
      isSelectable = _ref.isSelectable,
      customProps = _objectWithoutProperties(_ref, ["children", "isSelected", "isSelectable"]);

  var rowClassNames = cx([{
    'is-selected': isSelected
  }, {
    'is-selectable': isSelectable
  }, 'row', customProps.className]);

  var childrenArray = _react.default.Children.toArray(children);

  if (childrenArray.length > 16) {
    // eslint-disable-next-line no-console
    console.log("Number of Columns are ".concat(_react.default.Children.count(children), ". This is more than columns limit"));
  }

  return _react.default.createElement("tr", _extends({}, customProps, {
    "aria-selected": isSelected,
    className: rowClassNames
  }), children);
};

TableRow.propTypes = propTypes;
TableRow.defaultProps = defaultProps;
var _default = TableRow;
exports.default = _default;