"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _csvtojson = _interopRequireDefault(require("csvtojson"));

var _lodash = _interopRequireDefault(require("lodash"));

var _config = require("../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, compat/compat */

/* eslint-enable import/no-extraneous-dependencies */
var csvHeaders = ['name', 'filepath', 'themeable', 'bidi', 'deprecated'];

var parseCsv = function parseCsv() {
  return new Promise(function (resolve) {
    // Parse the csv file to json
    (0, _csvtojson.default)({
      noheader: true,
      headers: csvHeaders
    }).fromFile(_config.TerraIcon.csvFile).subscribe(function (jsonObj) {
      // TODO: move transformation into it's own file

      /* eslint-disable  no-param-reassign */
      jsonObj.componentName = "Icon".concat(_lodash.default.upperFirst(_lodash.default.camelCase(jsonObj.name)));
      jsonObj.filepath = "".concat(_config.TerraIcon.iconDir).concat(jsonObj.componentName, ".jsx");
      jsonObj.themeable = !!jsonObj.themeable;
      jsonObj.deprecated = !!jsonObj.deprecated;
      jsonObj.bidi = jsonObj.bidi === 'bi-directional';
      jsonObj.spinner = jsonObj.name === 'IconSpinner';
      jsonObj.syntaxComponent = "<".concat(jsonObj.componentName, " height='2em' width='2em' />");
      jsonObj.syntaxImport = "import ".concat(jsonObj.componentName, " from 'terra-icon/lib/icon/").concat(jsonObj.componentName, "';\n");
      /* eslint-enable  no-param-reassign */
    }).then(function (jsonObj) {
      return resolve(jsonObj);
    });
  });
};

var _default = parseCsv;
/* eslint-enable compat/compat */

exports.default = _default;